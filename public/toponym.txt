import {
  Component,
  ViewChild,
  inject,
  input,
  output,
  signal,
} from '@angular/core';
import {
  FormControl,
  FormsModule,
  Validators,
  ReactiveFormsModule,
  FormGroup,
  AbstractControl,
} from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { AddressFilterComponent } from '../../../address-filter/address-filter.component';
import { AddressFilterParams } from '../../../../interfaces/address-filter-params';
import { DefaultAddressParams } from '../../../../interfaces/default-address-params';
import { GeographyLevels } from '../../../../interfaces/types';
import { MatGridListModule } from '@angular/material/grid-list';
import { AddressFilter } from '../../../../interfaces/address-filter';
import { ConfirmationService, MessageService } from 'primeng/api';
import { AddressService } from '../../../../services/address.service';
@Component({
  selector: 'app-toponym-details',
  imports: [
    FormsModule,
    ReactiveFormsModule,
    AddressFilterComponent,
    MatFormFieldModule,
    MatGridListModule,
  ],
  providers: [ConfirmationService, MessageService],
  templateUrl: './toponym-details.component.html',
  styleUrl: './toponym-details.component.css',
})
export class ToponymDetailsComponent {
  @ViewChild(AddressFilterComponent)
  addressFilterComponent!: AddressFilterComponent;

  private messageService = inject(MessageService);
  private addressService = inject(AddressService);

  mainForm = new FormGroup<Record<string, AbstractControl>>({
    name: new FormControl<string>({ value: '', disabled: true }, [
      Validators.required,
    ]),
    shortName: new FormControl<string>({ value: '', disabled: true }, [
      Validators.required,
    ]),
    postName: new FormControl<string>({ value: '', disabled: true }, [
      Validators.required,
    ]),
    shortPostName: new FormControl<string>(
      { value: '', disabled: true },
      [Validators.required]
    ),
    isFederalCity: new FormControl<boolean>({ value: false, disabled: true }),
    isCapitalOfRegion: new FormControl<boolean>({ value: false, disabled: true }),
    isCapitalOfDistrict: new FormControl<boolean>({
      value: false,
      disabled: true,
    }),
  });

  data = input.required<{
    type: GeographyLevels;
    operation: 'create' | 'view-edit';
    defaultAddressParams: DefaultAddressParams;
    toponym?: {
      [key: string]: string | number | boolean;
    };
    isShowCountry: boolean;
    isShowRegion: boolean;
    isShowDistrict: boolean;
    isShowLocality: boolean;
    specialField: string;
    creationTitle: string;
    viewTitle: string;
    namePlaceHolder: string;
    shortNamePlaceHolder: string;
    postNamePlaceHolder: string;
    shortPostNamePlaceHolder: string;
  }>();

  params: AddressFilterParams = {
    source: 'toponymCard',
    multiple: false,
    cols: '1',
    gutterSize: '16px',
    rowHeight: '76px',
    type: this.data().type,
    isShowCountry:
      this.data().specialField != 'isShowCountry'
        ? this.data().isShowCountry
        : false,
    isShowRegion:
      this.data().specialField != 'isShowRegion'
        ? this.data().isShowRegion
        : false,
    isShowDistrict:
      this.data().specialField != 'isShowDistrict'
        ? this.data().isShowDistrict
        : false,
    isShowLocality:
      this.data().specialField != 'isShowLocality'
        ? this.data().isShowLocality
        : false,
    readonly: this.data().operation == 'create' ? false : true,
    class: this.data().operation == 'create' ? 'none' : 'view-mode',
  };

  addressFilter = signal<AddressFilter>({
    countries: null,
    regions: null,
    districts: null,
    localities: null,
  });
  invalidAddressFilter = true;
  isEditMode = signal<boolean>(false);
  onChangeMode = output<string>();
  changes = false;
  private confirmationService = inject(ConfirmationService);

  ngOnInit() {
    if (this.data().toponym) {
      this.setInitialValues();
    } else if (this.data().type == 'country') {
      this.mainForm.controls['name'].enable();
    }
  }

  checkIsSaveDisabled() {
    if (
      this.mainForm.controls['name'].hasError('required') ||
      (this.mainForm.controls['shortName'].hasError('required') &&
        this.data().type != 'country') ||
      (this.mainForm.controls['postName'].hasError('required') &&
        this.data().type == 'district') ||
      (this.mainForm.controls['shortPostName'].hasError('required') &&
        this.data().type == 'district') ||
      (this.invalidAddressFilter && this.data().type != 'country') ||
      (!this.changes && this.data().operation == 'view-edit')
    ) {
      return true;
    } else {
      return false;
    }
  }

  onChangeAddressFilter(event: AddressFilter) {
    if (this.data().operation == 'create' || this.isEditMode()) {
      this.addressFilter.set(event);
      if (
        this.data().type == 'locality' &&
        this.addressFilter().districts &&
        this.addressFilter().districts!.length > 0
      ) {
        this.mainForm.controls['name'].enable();
        this.mainForm.controls['shortName'].enable();
        this.mainForm.controls['isFederalCity'].enable();
        this.mainForm.controls['isCapitalOfRegion'].enable();
        this.mainForm.controls['isCapitalOfDistrict'].enable();
        this.invalidAddressFilter = false;
      }
      if (
        this.data().type == 'locality' &&
        (!this.addressFilter().districts ||
          (this.addressFilter().districts &&
            this.addressFilter().districts!.length == 0))
      ) {
        this.mainForm.controls['name'].disable();
        this.mainForm.controls['shortName'].disable();
        this.mainForm.controls['isFederalCity'].disable();
        this.mainForm.controls['isCapitalOfRegion'].disable();
        this.mainForm.controls['isCapitalOfDistrict'].disable();
        this.invalidAddressFilter = true;
      }

      if (
        this.data().type == 'district' &&
        this.addressFilter().regions &&
        this.addressFilter().regions!.length > 0
      ) {
        this.mainForm.controls['name'].enable();
        this.mainForm.controls['shortName'].enable();
        this.mainForm.controls['postName'].enable();
        this.mainForm.controls['shortPostName'].enable();

        this.invalidAddressFilter = false;
      }
      if (
        this.data().type == 'district' &&
        (!this.addressFilter().regions ||
          (this.addressFilter().regions &&
            this.addressFilter().regions!.length == 0))
      ) {
        this.mainForm.controls['name'].disable();
        this.mainForm.controls['shortName'].disable();
        this.mainForm.controls['postName'].disable();
        this.mainForm.controls['shortPostName'].disable();

        this.invalidAddressFilter = true;
      }

      if (
        this.data().type == 'region' &&
        this.addressFilter().countries &&
        this.addressFilter().countries!.length > 0
      ) {
        this.mainForm.controls['name'].enable();
        this.mainForm.controls['shortName'].enable();

        this.invalidAddressFilter = false;
      }
      if (
        this.data().type == 'region' &&
        (!this.addressFilter().countries ||
          (this.addressFilter().countries &&
            this.addressFilter().countries!.length == 0))
      ) {
        this.mainForm.controls['name'].disable();
        this.mainForm.controls['shortName'].disable();

        this.invalidAddressFilter = true;
      }

      this.onChangeValidation();
    }
  }
  onSaveClick(action: 'justSave' | 'saveAndExit') {
    this.addressService
      .checkToponymName(
        this.data().type,
        this.mainForm.controls['name'].value!,
        this.data().toponym ? (this.data().toponym!['id'] as number) : null,
        this.addressFilter(),
        this.data().operation
      )
      .subscribe({
        next: (res) => {
          if (res.data) {
            this.messageService.add({
              severity: 'warn',
              summary: 'Ошибка',
              detail: `Топоним с названием '${this.mainForm.controls[
                'name'
              ]
                .value!}' уже существует в этом кластере! Если это не ошибка, обратитесь к администратору.`,
              sticky: true,
            });
          } else {
            this.saveToponym(action);
          }
        },
        error: (err) => {
          console.log(err);
          let errorMessage =
            typeof err.error === 'string'
              ? err.error
              : 'Ошибка: ' + err.message;
          this.messageService.add({
            severity: 'error',
            summary: 'Ошибка',
            detail: errorMessage,
            sticky: true,
          });
        },
      });
  }

  saveToponym(action: 'justSave' | 'saveAndExit') {
    this.addressService
      .saveToponym(
        this.data().type,
        this.mainForm.controls['name'].value!,
        this.data().toponym ? (this.data().toponym!['id'] as number) : null,
        this.mainForm.controls['shortName'].value!,
        this.mainForm.controls['postName'].value!,
        this.mainForm.controls['shortPostName'].value!,
        this.mainForm.controls['isFederalCity'].value!,
        this.mainForm.controls['isCapitalOfRegion'].value!,
        this.mainForm.controls['isCapitalOfDistrict'].value!,
        this.addressFilter(),
        this.data().operation
      )
      .subscribe({
        next: (res) => {
          if (action == 'saveAndExit') {
            //TODO: this.dialogRef.close({ name: res.data });
          } else {
            this.changeToViewMode(null);
            this.messageService.add({
              severity: 'success',
              summary: 'Подтверждение',
              detail: `Топоним '${res.data}' успешно обновлен!`,
            });
          }
        },
        error: (err) => {
          console.log(err);
          let errorMessage =
            typeof err.error === 'string'
              ? err.error
              : 'Ошибка: ' + err.message;
          this.messageService.add({
            severity: 'error',
            summary: 'Ошибка',
            detail: errorMessage,
            sticky: true,
          });
        },
      });
  }

  onEditClick() {
    this.isEditMode.set(true);
    this.changes = false;
    this.mainForm.controls['name'].enable();
    this.mainForm.controls['shortName'].enable();
    this.mainForm.controls['postName'].enable();
    this.mainForm.controls['shortPostName'].enable();
    this.mainForm.controls['isFederalCity'].enable();
    this.mainForm.controls['isCapitalOfRegion'].enable();
    this.mainForm.controls['isCapitalOfDistrict'].enable();
    this.invalidAddressFilter = false;
    this.addressFilterComponent.onChangeMode('edit', null);
  }

  onViewClick() {
    console.log('this.addressFilter()', this.addressFilter());
    if (this.changes) {
      this.confirmationService.confirm({
        message: 'Вы уверены, что хотите выйти без сохранения?',
        header: 'Предупреждение',
        closable: true,
        closeOnEscape: true,
        icon: 'pi pi-exclamation-triangle',
        rejectButtonProps: {
          label: 'Нет',
        },
        acceptButtonProps: {
          label: 'Да',
          severity: 'secondary',
          outlined: true,
        },
        accept: () => {
          this.setInitialValues();
          this.changeToViewMode(this.data().defaultAddressParams);
        },
        reject: () => {},
      });
    } else {
      this.changeToViewMode(null);
    }
  }

  onChangeValidation() {
    if (this.data().operation == 'view-edit') {
      this.changes = false;
      console.log(
        "this.mainForm.controls['name'].value !=this.data().toponym!['name']"
      );
      console.log(
        this.mainForm.controls['name'].value,
        this.data().toponym!['name']
      );
      console.log(
        "mainForm.controls['name'].hasError('required') || (mainForm.controls['shortName'].hasError('required') && data.type != 'country') || (invalidAddressFilter && data.type != 'country') || (!changes && data.operation == 'view-edit')"
      );
      console.log(
        this.mainForm.controls['name'].hasError('required'),
        this.mainForm.controls['shortName'].hasError('required'),
        this.data().type,
        this.invalidAddressFilter,
        this.data().type,
        this.changes,
        this.data().operation
      );
      console.log(
        this.mainForm.controls['name'].hasError('required') ||
          (this.mainForm.controls['shortName'].hasError('required') &&
            this.data().type != 'country') ||
          (this.invalidAddressFilter && this.data().type != 'country') ||
          (!this.changes && this.data().operation == 'view-edit')
      );
      console.log(
        this.mainForm.controls['name'].hasError('required'),
        this.mainForm.controls['shortName'].hasError('required') &&
          this.data().type != 'country',
        this.invalidAddressFilter && this.data().type != 'country',
        !this.changes && this.data().operation == 'view-edit'
      );

      if (
        this.data().type == 'country' &&
        this.mainForm.controls['name'].value !=
          this.data().toponym!['name']
      ) {
        this.changes = true;
        console.log(
          this.mainForm.controls['name'].hasError('required'),
          this.mainForm.controls['shortName'].hasError('required') &&
            this.data().type != 'country',
          this.invalidAddressFilter && this.data().type != 'country',
          !this.changes && this.data().operation == 'view-edit'
        );
      }

      if (
        this.data().type == 'region' &&
        (this.addressFilter().countries![0] !=
          this.data().toponym!['country.id'] ||
          this.mainForm.controls['name'].value !=
            this.data().toponym!['name'] ||
          this.mainForm.controls['shortName'].value !=
            this.data().toponym!['shortName'])
      ) {
        this.changes = true;
      }

      if (
        this.data().type == 'district' &&
        (this.addressFilter().countries![0] !=
          this.data().toponym!['region.country.id'] ||
          this.addressFilter().regions![0] !=
            this.data().toponym!['region.id'] ||
          this.mainForm.controls['name'].value !=
            this.data().toponym!['name'] ||
          this.mainForm.controls['shortName'].value !=
            this.data().toponym!['shortName'] ||
          this.mainForm.controls['postName'].value !=
            this.data().toponym!['postName'] ||
          this.mainForm.controls['shortPostName'].value !=
            this.data().toponym!['shortPostName'])
      ) {
        this.changes = true;
      }

      if (
        this.data().type == 'locality' &&
        (this.addressFilter().countries![0] !=
          this.data().toponym!['district.region.country.id'] ||
          this.addressFilter().regions![0] !=
            this.data().toponym!['district.region.id'] ||
          this.addressFilter().districts![0] !=
            this.data().toponym!['district.id'] ||
          this.mainForm.controls['name'].value !=
            this.data().toponym!['name'] ||
          this.mainForm.controls['shortName'].value !=
            this.data().toponym!['shortName'] ||
          this.mainForm.controls['isFederalCity'].value !=
            this.data().toponym!['isFederalCity'] ||
          this.mainForm.controls['isCapitalOfRegion'].value !=
            this.data().toponym!['isCapitalOfRegion'] ||
          this.mainForm.controls['isCapitalOfDistrict'].value !=
            this.data().toponym!['isCapitalOfDistrict'])
      ) {
        this.changes = true;
      }
    }
  }

  changeToViewMode(addressParams: any) {
    this.isEditMode.set(false);
    this.mainForm.controls['name'].disable();
    this.mainForm.controls['shortName'].disable();
    this.mainForm.controls['postName'].disable();
    this.mainForm.controls['shortPostName'].disable();
    this.mainForm.controls['isFederalCity'].disable();
    this.mainForm.controls['isCapitalOfRegion'].disable();
    this.mainForm.controls['isCapitalOfDistrict'].disable();
    this.invalidAddressFilter = false;
    this.addressFilterComponent.onChangeMode('view', addressParams);
  }

  setInitialValues() {
    this.mainForm.controls['name'].setValue(
      this.data().toponym!['name']
    );
    this.mainForm.controls['shortName'].setValue(
      this.data().toponym!['shortName']
    );
    this.mainForm.controls['postName'].setValue(
      this.data().toponym!['postName']
    );
    this.mainForm.controls['shortPostName'].setValue(
      this.data().toponym!['shortPostName']
    );
    this.mainForm.controls['isFederalCity'].setValue(
      this.data().toponym!['isFederalCity']
    );
    this.mainForm.controls['isCapitalOfRegion'].setValue(
      this.data().toponym!['isCapitalOfRegion']
    );
    this.mainForm.controls['isCapitalOfDistrict'].setValue(
      this.data().toponym!['isCapitalOfDistrict']
    );
  }
}
